makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
qq<- makeVector(c(1,2,3,4,5))
cachemean(qq)
is.null(m)
is.null(null)
is.null("null")
is.null(null)
is.null(NULL)
is.null(NULL)
!is.null(NULL)
B = matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2)
B = matrix( c(1,2,3,4),   nrow=2,   ncol=2)
B
makeCacheMatrix( B )
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinver <- function(inv) inver <<- inv
getinver <- function() inver
list(set = set, get = get,
setinver = setinver,
getinver = getinver)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inver <- x$getinver()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data)
x$setinver(inver)
inver
}
makeCacheMatrix( B )
ww <- makeCacheMatrix(B)
cacheSolve(ww)
invB <- cacheSolve(ww)
solve(B)
